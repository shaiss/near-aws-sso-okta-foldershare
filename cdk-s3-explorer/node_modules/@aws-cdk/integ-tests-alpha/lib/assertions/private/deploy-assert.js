"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployAssert = void 0;
const core_1 = require("aws-cdk-lib/core");
const constructs_1 = require("constructs");
const assertions_1 = require("../assertions");
const http_call_1 = require("../http-call");
const hash_1 = require("../private/hash");
const sdk_1 = require("../sdk");
const DEPLOY_ASSERT_SYMBOL = Symbol.for('@aws-cdk/integ-tests.DeployAssert');
/**
 * Construct that allows for registering a list of assertions
 * that should be performed on a construct
 */
class DeployAssert extends constructs_1.Construct {
    /**
     * Returns whether the construct is a DeployAssert construct
     */
    static isDeployAssert(x) {
        return x !== null && typeof (x) === 'object' && DEPLOY_ASSERT_SYMBOL in x;
    }
    /**
     * Finds a DeployAssert construct in the given scope
     */
    static of(construct) {
        const scopes = constructs_1.Node.of(constructs_1.Node.of(construct).root).findAll();
        const deployAssert = scopes.find(s => DeployAssert.isDeployAssert(s));
        if (!deployAssert) {
            throw new Error('No DeployAssert construct found in scopes');
        }
        return deployAssert;
    }
    constructor(scope, props) {
        super(scope, 'Default');
        this.assertionIdCounts = new Map();
        this.scope = props?.stack ?? new core_1.Stack(scope, 'DeployAssert');
        Object.defineProperty(this, DEPLOY_ASSERT_SYMBOL, { value: true });
    }
    awsApiCall(service, api, parameters, outputPaths) {
        let hash = '';
        try {
            hash = (0, hash_1.md5hash)(this.scope.resolve(parameters));
        }
        catch { }
        return new sdk_1.AwsApiCall(this.scope, this.uniqueAssertionId(`AwsApiCall${service}${api}${hash}`), {
            api,
            service,
            parameters,
            outputPaths,
        });
    }
    httpApiCall(url, options) {
        let hash = '';
        try {
            hash = (0, hash_1.md5hash)(this.scope.resolve({
                url,
                options,
            }));
        }
        catch { }
        let append = '';
        if (!core_1.Token.isUnresolved(url)) {
            const parsedUrl = new URL(url);
            append = `${parsedUrl.hostname}${parsedUrl.pathname}`;
        }
        return new http_call_1.HttpApiCall(this.scope, this.uniqueAssertionId(`HttpApiCall${append}${hash}`), {
            url,
            fetchOptions: options,
        });
    }
    invokeFunction(props) {
        const hash = (0, hash_1.md5hash)(this.scope.resolve(props));
        return new sdk_1.LambdaInvokeFunction(this.scope, this.uniqueAssertionId(`LambdaInvoke${hash}`), props);
    }
    expect(id, expected, actual) {
        new assertions_1.EqualsAssertion(this.scope, `EqualsAssertion${id}`, {
            expected,
            actual,
        });
    }
    /**
     * Gets a unique logical id based on a proposed assertion id.
     */
    uniqueAssertionId(id) {
        const count = this.assertionIdCounts.get(id);
        if (count === undefined) {
            // If we've never seen this id before, we'll return the id unchanged
            // to maintain backward compatibility.
            this.assertionIdCounts.set(id, 1);
            return id;
        }
        // Otherwise, we'll increment the counter and return a unique id.
        this.assertionIdCounts.set(id, count + 1);
        return `${id}${count}`;
    }
}
exports.DeployAssert = DeployAssert;
//# sourceMappingURL=data:application/json;base64,