"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = handler;
exports.onTimeout = onTimeout;
exports.isComplete = isComplete;
/* eslint-disable no-console */
const assertion_1 = require("./assertion");
const http_1 = require("./http");
const sdk_1 = require("./sdk");
const types = require("./types");
async function handler(event, context) {
    console.log(`Event: ${JSON.stringify({ ...event, ResponseURL: '...' })}`);
    const provider = createResourceHandler(event, context);
    try {
        // if we are deleting the custom resource, just respond
        // with 'SUCCESS' since there is nothing to do.
        if (event.RequestType === 'Delete') {
            await provider.respond({
                status: 'SUCCESS',
                reason: 'OK',
            });
            return;
        }
        const result = await provider.handle();
        // if there is a `stateMachineArn` then we have already started a state machine
        // execution and the rest will be handled there
        if ('stateMachineArn' in event.ResourceProperties) {
            console.info('Found "stateMachineArn", waiter statemachine started');
            return;
        }
        else if ('expected' in event.ResourceProperties) {
            console.info('Found "expected", testing assertions');
            const actualPath = event.ResourceProperties.actualPath;
            // if we are providing a path to make the assertion at, that means that we have
            // flattened the response, otherwise the path to assert against in the entire response
            const actual = actualPath ? result[`apiCallResponse.${actualPath}`] : result.apiCallResponse;
            const assertion = new assertion_1.AssertionHandler({
                ...event,
                ResourceProperties: {
                    ServiceToken: event.ServiceToken,
                    actual,
                    expected: event.ResourceProperties.expected,
                },
            }, context);
            try {
                const assertionResult = await assertion.handle();
                await provider.respond({
                    status: 'SUCCESS',
                    reason: 'OK',
                    // return both the result of the API call _and_ the assertion results
                    data: {
                        ...assertionResult,
                        ...result,
                    },
                });
                return;
            }
            catch (e) {
                await provider.respond({
                    status: 'FAILED',
                    reason: e.message ?? 'Internal Error',
                });
                return;
            }
        }
        await provider.respond({
            status: 'SUCCESS',
            reason: 'OK',
            data: result,
        });
    }
    catch (e) {
        await provider.respond({
            status: 'FAILED',
            reason: e.message ?? 'Internal Error',
        });
        return;
    }
    return;
}
/**
 * Invoked by the waiter statemachine when the retry
 * attempts are exhausted
 */
async function onTimeout(timeoutEvent) {
    // the event payload is passed through the `errorMessage` in the state machine
    // timeout event
    const isCompleteRequest = JSON.parse(JSON.parse(timeoutEvent.Cause).errorMessage);
    const provider = createResourceHandler(isCompleteRequest, standardContext);
    await provider.respond({
        status: 'FAILED',
        reason: 'Operation timed out: ' + JSON.stringify(isCompleteRequest),
    });
}
/**
 * Invoked by the waiter statemachine when the user is waiting for a specific
 * result.
 *
 * If the result of the assertion is not successful then it will throw an error
 * which will cause the state machine to try again
 */
async function isComplete(event, context) {
    console.log(`Event: ${JSON.stringify({ ...event, ResponseURL: '...' })}`);
    const provider = createResourceHandler(event, context);
    try {
        const result = await provider.handleIsComplete();
        const actualPath = event.ResourceProperties.actualPath;
        if (result) {
            const actual = actualPath ? result[`apiCallResponse.${actualPath}`] : result.apiCallResponse;
            if ('expected' in event.ResourceProperties) {
                const assertion = new assertion_1.AssertionHandler({
                    ...event,
                    ResourceProperties: {
                        ServiceToken: event.ServiceToken,
                        actual,
                        expected: event.ResourceProperties.expected,
                    },
                }, context);
                const assertionResult = await assertion.handleIsComplete();
                if (!(assertionResult?.failed)) {
                    await provider.respond({
                        status: 'SUCCESS',
                        reason: 'OK',
                        data: {
                            ...assertionResult,
                            ...result,
                        },
                    });
                    return;
                }
                else {
                    console.log(`Assertion Failed: ${JSON.stringify(assertionResult)}`);
                    throw new Error(JSON.stringify(event));
                }
            }
            await provider.respond({
                status: 'SUCCESS',
                reason: 'OK',
                data: result,
            });
        }
        else {
            console.log('No result');
            throw new Error(JSON.stringify(event));
        }
        return;
    }
    catch (e) {
        console.log(e);
        throw new Error(JSON.stringify(event));
    }
}
function createResourceHandler(event, context) {
    if (event.ResourceType.startsWith(types.SDK_RESOURCE_TYPE_PREFIX)) {
        return new sdk_1.AwsApiCallHandler(event, context);
    }
    else if (event.ResourceType.startsWith(types.ASSERT_RESOURCE_TYPE)) {
        return new assertion_1.AssertionHandler(event, context);
    }
    else if (event.ResourceType.startsWith(types.HTTP_RESOURCE_TYPE)) {
        return new http_1.HttpHandler(event, context);
    }
    else {
        throw new Error(`Unsupported resource type "${event.ResourceType}`);
    }
}
const standardContext = {
    getRemainingTimeInMillis: () => 90000,
};
//# sourceMappingURL=data:application/json;base64,