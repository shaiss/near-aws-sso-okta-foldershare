"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WaiterStateMachine = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("aws-cdk-lib/core");
const constructs_1 = require("constructs");
const providers_1 = require("./providers");
/**
 * A very simple StateMachine construct highly customized to the provider framework.
 * This is so that this package does not need to depend on aws-stepfunctions module.
 *
 * The state machine continuously calls the isCompleteHandler, until it succeeds or times out.
 * The handler is called `maxAttempts` times with an `interval` duration and a `backoffRate` rate.
 *
 * For example with:
 * - maxAttempts = 360 (30 minutes)
 * - interval = 5
 * - backoffRate = 1 (no backoff)
 *
 * it will make the API Call every 5 seconds and fail after 360 failures.
 *
 * If the backoff rate is changed to 2 (for example), it will
 * - make the first call
 * - wait 5 seconds
 * - make the second call
 * - wait 15 seconds
 * - etc.
 */
class WaiterStateMachine extends constructs_1.Construct {
    constructor(scope, id, props = {}) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings._aws_cdk_integ_tests_alpha_WaiterStateMachineProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, WaiterStateMachine);
            }
            throw error;
        }
        const interval = props.interval || core_1.Duration.seconds(5);
        const totalTimeout = props.totalTimeout || core_1.Duration.minutes(30);
        const maxAttempts = calculateMaxRetries(totalTimeout.toSeconds(), interval.toSeconds(), props.backoffRate ?? 1);
        if (Math.round(maxAttempts) !== maxAttempts) {
            throw new Error(`Cannot determine retry count since totalTimeout=${totalTimeout.toSeconds()}s is not integrally dividable by queryInterval=${interval.toSeconds()}s`);
        }
        this.isCompleteProvider = new providers_1.AssertionsProvider(this, 'IsCompleteProvider', {
            handler: 'index.isComplete',
            uuid: '76b3e830-a873-425f-8453-eddd85c86925',
        });
        const timeoutProvider = new providers_1.AssertionsProvider(this, 'TimeoutProvider', {
            handler: 'index.onTimeout',
            uuid: '5c1898e0-96fb-4e3e-95d5-f6c67f3ce41a',
        });
        const role = new core_1.CfnResource(this, 'Role', {
            type: 'AWS::IAM::Role',
            properties: {
                AssumeRolePolicyDocument: {
                    Version: '2012-10-17',
                    Statement: [{ Action: 'sts:AssumeRole', Effect: 'Allow', Principal: { Service: 'states.amazonaws.com' } }],
                },
                Policies: [
                    {
                        PolicyName: 'InlineInvokeFunctions',
                        PolicyDocument: {
                            Version: '2012-10-17',
                            Statement: [{
                                    Action: 'lambda:InvokeFunction',
                                    Effect: 'Allow',
                                    Resource: [
                                        this.isCompleteProvider.serviceToken,
                                        timeoutProvider.serviceToken,
                                    ],
                                }],
                        },
                    },
                ],
            },
        });
        const definition = core_1.Stack.of(this).toJsonString({
            StartAt: 'framework-isComplete-task',
            States: {
                'framework-isComplete-task': {
                    End: true,
                    Retry: [{
                            ErrorEquals: ['States.ALL'],
                            IntervalSeconds: interval.toSeconds(),
                            MaxAttempts: maxAttempts,
                            BackoffRate: props.backoffRate ?? 1,
                        }],
                    Catch: [{
                            ErrorEquals: ['States.ALL'],
                            Next: 'framework-onTimeout-task',
                        }],
                    Type: 'Task',
                    Resource: this.isCompleteProvider.serviceToken,
                },
                'framework-onTimeout-task': {
                    End: true,
                    Type: 'Task',
                    Resource: timeoutProvider.serviceToken,
                },
            },
        });
        const resource = new core_1.CfnResource(this, 'Resource', {
            type: 'AWS::StepFunctions::StateMachine',
            properties: {
                DefinitionString: definition,
                RoleArn: role.getAtt('Arn'),
            },
        });
        resource.node.addDependency(role);
        this.stateMachineArn = resource.ref;
        this.roleArn = role.getAtt('Arn').toString();
        this.isCompleteProvider.grantInvoke(this.roleArn);
        timeoutProvider.grantInvoke(this.roleArn);
    }
}
exports.WaiterStateMachine = WaiterStateMachine;
_a = JSII_RTTI_SYMBOL_1;
WaiterStateMachine[_a] = { fqn: "@aws-cdk/integ-tests-alpha.WaiterStateMachine", version: "2.214.0-alpha.0" };
/**
 * Calculate the max number of retries
 */
function calculateMaxRetries(maxSeconds, intervalSeconds, backoff) {
    // if backoff === 1 then we aren't really using backoff
    if (backoff === 1) {
        return Math.floor(maxSeconds / intervalSeconds);
    }
    let retries = 1;
    let nextInterval = intervalSeconds;
    let i = 0;
    while (i < maxSeconds) {
        nextInterval = nextInterval + nextInterval * backoff;
        i += nextInterval;
        if (i >= maxSeconds)
            break;
        retries++;
    }
    return retries;
}
//# sourceMappingURL=data:application/json;base64,