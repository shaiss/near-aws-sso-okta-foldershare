{"version":"2","toolVersion":"1.80.0","snippets":{"50bfa2368f99d1833abc3dfd776ae6e3363396972f1bc5215f257e011cbef319":{"translations":{"python":{"source":"from aws_cdk.core import Stack\nfrom aws_cdk.assertions import Template\n\nstack = Stack()\n# ...\ntemplate = Template.from_stack(stack)","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Amazon.CDK.Assertions;\n\nvar stack = new Stack();\n// ...\nvar template = Template.FromStack(stack);","version":"1"},"java":{"source":"import software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.assertions.Template;\n\nStack stack = new Stack();\n// ...\nTemplate template = Template.fromStack(stack);","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws-samples/dummy/awscdkassertions\"\n\nstack := awscdkcore.NewStack()\n// ...\ntemplate := awscdkassertions.Template_FromStack(stack)","version":"1"},"$":{"source":"import { Stack } from '@aws-cdk/core';\nimport { Template } from '@aws-cdk/assertions';\n\nconst stack = new Stack(/* ... */);\n// ...\nconst template = Template.fromStack(stack);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":21}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Template","@aws-cdk/assertions.Template#fromStack","@aws-cdk/core.Stack"],"fullSource":"import { Stack } from '@aws-cdk/core';\nimport { Template } from '@aws-cdk/assertions';\n\nconst stack = new Stack(/* ... */);\n// ...\nconst template = Template.fromStack(stack);","syntaxKindCounter":{"10":2,"75":8,"194":1,"196":1,"197":1,"225":2,"242":2,"243":2,"254":2,"255":2,"257":2,"258":2,"290":1},"fqnsFingerprint":"ffff911b16d15e1e1073e3d3b7d871591d42e9c12faa1edf68364c36a84b6271"},"dde1e3ebcf5b96a222f0cbc619349dd525bee3876e4e3e0e4f09a5d00cb4990c":{"translations":{"python":{"source":"template_json = \"{ \\\"Resources\\\": ... }\" # The CloudFormation template as JSON serialized string.\ntemplate = Template.from_string(template_json)","version":"2"},"csharp":{"source":"var templateJson = \"{ \\\"Resources\\\": ... }\"; /* The CloudFormation template as JSON serialized string. */\nvar template = Template.FromString(templateJson);","version":"1"},"java":{"source":"String templateJson = \"{ \\\"Resources\\\": ... }\"; /* The CloudFormation template as JSON serialized string. */\nTemplate template = Template.fromString(templateJson);","version":"1"},"go":{"source":"templateJson := \"{ \\\"Resources\\\": ... }\" /* The CloudFormation template as JSON serialized string. */\ntemplate := awscdkassertions.Template_FromString(templateJson)","version":"1"},"$":{"source":"const templateJson = '{ \"Resources\": ... }'; /* The CloudFormation template as JSON serialized string. */\nconst template = Template.fromString(templateJson);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":32}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Template","@aws-cdk/assertions.Template#fromString"],"fullSource":"import { Template } from '@aws-cdk/assertions';\n\n// Code snippet begins after !show marker below\n/// !show\nconst templateJson = '{ \"Resources\": ... }'; /* The CloudFormation template as JSON serialized string. */\nconst template = Template.fromString(templateJson);\n/// !hide\n// Code snippet ended before !hide marker above","syntaxKindCounter":{"10":1,"75":5,"194":1,"196":1,"225":2,"242":2,"243":2},"fqnsFingerprint":"5443e8de1bcc51da8bb0c0fef6e20ac7fa5ce80d8e344bac7c3735ee57aaf754"},"3fd5d4d934e8e0bc114cfd684c13a4649152ed10756b5b611eb707b1b294eede":{"translations":{"python":{"source":"template.template_matches({\n    \"Resources\": {\n        \"BarLogicalId\": {\n            \"Type\": \"Foo::Bar\",\n            \"Properties\": {\n                \"Baz\": \"Qux\"\n            }\n        }\n    }\n})","version":"2"},"csharp":{"source":"template.TemplateMatches(new Dictionary<string, IDictionary<string, IDictionary<string, object>>> {\n    { \"Resources\", new Struct {\n        BarLogicalId = new Struct {\n            Type = \"Foo::Bar\",\n            Properties = new Struct {\n                Baz = \"Qux\"\n            }\n        }\n    } }\n});","version":"1"},"java":{"source":"template.templateMatches(Map.of(\n        \"Resources\", Map.of(\n                \"BarLogicalId\", Map.of(\n                        \"Type\", \"Foo::Bar\",\n                        \"Properties\", Map.of(\n                                \"Baz\", \"Qux\")))));","version":"1"},"go":{"source":"template.TemplateMatches(map[string]map[string]map[string]interface{}{\n\t\"Resources\": map[string]map[string]interface{}{\n\t\t\"BarLogicalId\": map[string]interface{}{\n\t\t\t\"Type\": jsii.String(\"Foo::Bar\"),\n\t\t\t\"Properties\": map[string]*string{\n\t\t\t\t\"Baz\": jsii.String(\"Qux\"),\n\t\t\t},\n\t\t},\n\t},\n})","version":"1"},"$":{"source":"template.templateMatches({\n  Resources: {\n    BarLogicalId: {\n      Type: 'Foo::Bar',\n      Properties: {\n        Baz: 'Qux',\n      },\n    },\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":42}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Template#templateMatches"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\ntemplate.templateMatches({\n  Resources: {\n    BarLogicalId: {\n      Type: 'Foo::Bar',\n      Properties: {\n        Baz: 'Qux',\n      },\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":7,"193":4,"194":1,"196":1,"226":1,"281":5},"fqnsFingerprint":"669485a32cabf563c2d3a61c22166ad9acd66b62d5ac7096489004f46142d5b9"},"58b2bb454020b934de6c0df743fa954790557c4c47aa69a321ed6e7c70f7d55a":{"translations":{"python":{"source":"template.resource_count_is(\"Foo::Bar\", 2)","version":"2"},"csharp":{"source":"template.ResourceCountIs(\"Foo::Bar\", 2);","version":"1"},"java":{"source":"template.resourceCountIs(\"Foo::Bar\", 2);","version":"1"},"go":{"source":"template.ResourceCountIs(jsii.String(\"Foo::Bar\"), jsii.Number(2))","version":"1"},"$":{"source":"template.resourceCountIs('Foo::Bar', 2);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":75}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Template#resourceCountIs"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\ntemplate.resourceCountIs('Foo::Bar', 2);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":1,"75":2,"194":1,"196":1,"226":1},"fqnsFingerprint":"b103fdba4af262ab46acc65c1f48282d3b1e8e44bb6f7d292d3377a728ef3cb1"},"e6e8b5b162cf33331c5723d09d4589dee12f3314154fb710e9537e41d026ed3e":{"translations":{"python":{"source":"template.has_resource_properties(\"Foo::Bar\", {\n    \"Foo\": \"Bar\",\n    \"Baz\": 5,\n    \"Qux\": [\"Waldo\", \"Fred\"]\n})","version":"2"},"csharp":{"source":"template.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, object> {\n    { \"Foo\", \"Bar\" },\n    { \"Baz\", 5 },\n    { \"Qux\", new [] { \"Waldo\", \"Fred\" } }\n});","version":"1"},"java":{"source":"template.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Foo\", \"Bar\",\n        \"Baz\", 5,\n        \"Qux\", List.of(\"Waldo\", \"Fred\")));","version":"1"},"go":{"source":"template.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]interface{}{\n\t\"Foo\": jsii.String(\"Bar\"),\n\t\"Baz\": jsii.Number(5),\n\t\"Qux\": []*string{\n\t\tjsii.String(\"Waldo\"),\n\t\tjsii.String(\"Fred\"),\n\t},\n})","version":"1"},"$":{"source":"template.hasResourceProperties('Foo::Bar', {\n  Foo: 'Bar',\n  Baz: 5,\n  Qux: [ 'Waldo', 'Fred' ],\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":87}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\ntemplate.hasResourceProperties('Foo::Bar', {\n  Foo: 'Bar',\n  Baz: 5,\n  Qux: [ 'Waldo', 'Fred' ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"8":1,"10":4,"75":5,"192":1,"193":1,"194":1,"196":1,"226":1,"281":3},"fqnsFingerprint":"7c24accab321682703aa2c3ed7a68b84ed7c9aa61125bf8eb2e53314a4ea0463"},"6445c16d25a4915cb705e34aa0e2ae9be5f4849da8d03152186fd610965de68d":{"translations":{"python":{"source":"template.has_resource(\"Foo::Bar\", {\n    \"Properties\": {\"Foo\": \"Bar\"},\n    \"DependsOn\": [\"Waldo\", \"Fred\"]\n})","version":"2"},"csharp":{"source":"template.HasResource(\"Foo::Bar\", new Dictionary<string, object> {\n    { \"Properties\", new Struct { Foo = \"Bar\" } },\n    { \"DependsOn\", new [] { \"Waldo\", \"Fred\" } }\n});","version":"1"},"java":{"source":"template.hasResource(\"Foo::Bar\", Map.of(\n        \"Properties\", Map.of(\"Foo\", \"Bar\"),\n        \"DependsOn\", List.of(\"Waldo\", \"Fred\")));","version":"1"},"go":{"source":"template.HasResource(jsii.String(\"Foo::Bar\"), map[string]interface{}{\n\t\"Properties\": map[string]*string{\n\t\t\"Foo\": jsii.String(\"Bar\"),\n\t},\n\t\"DependsOn\": []*string{\n\t\tjsii.String(\"Waldo\"),\n\t\tjsii.String(\"Fred\"),\n\t},\n})","version":"1"},"$":{"source":"template.hasResource('Foo::Bar', {\n  Properties: { Foo: 'Bar' },\n  DependsOn: [ 'Waldo', 'Fred' ],\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":98}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Template#hasResource"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\ntemplate.hasResource('Foo::Bar', {\n  Properties: { Foo: 'Bar' },\n  DependsOn: [ 'Waldo', 'Fred' ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":5,"192":1,"193":2,"194":1,"196":1,"226":1,"281":3},"fqnsFingerprint":"85902b924b2f9af5369c10cb8ee56b1cc607c2a0cf49f3c6dc3cfc32357b0d61"},"83b81076e9d003ebbb806290f131502c93d006f0a673a43fcf9788af9f1ec9f9":{"translations":{"python":{"source":"expected = {\n    \"Value\": \"Bar\",\n    \"Export\": {\"Name\": \"ExportBaz\"}\n}\ntemplate.has_output(\"Foo\", expected)","version":"2"},"csharp":{"source":"IDictionary<string, object> expected = new Dictionary<string, object> {\n    { \"Value\", \"Bar\" },\n    { \"Export\", new Dictionary<string, string> { { \"Name\", \"ExportBaz\" } } }\n};\ntemplate.HasOutput(\"Foo\", expected);","version":"1"},"java":{"source":"Map<String, Object> expected = Map.of(\n        \"Value\", \"Bar\",\n        \"Export\", Map.of(\"Name\", \"ExportBaz\"));\ntemplate.hasOutput(\"Foo\", expected);","version":"1"},"go":{"source":"expected := map[string]interface{}{\n\t\"Value\": jsii.String(\"Bar\"),\n\t\"Export\": map[string]*string{\n\t\t\"Name\": jsii.String(\"ExportBaz\"),\n\t},\n}\ntemplate.HasOutput(jsii.String(\"Foo\"), expected)","version":"1"},"$":{"source":"const expected = {\n  Value: 'Bar',\n  Export: { Name: 'ExportBaz' },\n};\ntemplate.hasOutput('Foo', expected);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":119}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Template#hasOutput"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst expected = {\n  Value: 'Bar',\n  Export: { Name: 'ExportBaz' },\n};\ntemplate.hasOutput('Foo', expected);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":7,"193":2,"194":1,"196":1,"225":1,"226":1,"242":1,"243":1,"281":3},"fqnsFingerprint":"e77a36ad54319a221bc231e24654b295f53959efbce4eb622581f1ad9feba1f5"},"3c26b199e49159b11b9b63be350a9375886d8e8e7df3ec07d852b1f7c73df58e":{"translations":{"python":{"source":"template.has_output(\"*\", {\n    \"Value\": \"Bar\",\n    \"Export\": {\"Name\": \"ExportBaz\"}\n})","version":"2"},"csharp":{"source":"template.HasOutput(\"*\", new Dictionary<string, object> {\n    { \"Value\", \"Bar\" },\n    { \"Export\", new Struct { Name = \"ExportBaz\" } }\n});","version":"1"},"java":{"source":"template.hasOutput(\"*\", Map.of(\n        \"Value\", \"Bar\",\n        \"Export\", Map.of(\"Name\", \"ExportBaz\")));","version":"1"},"go":{"source":"template.HasOutput(jsii.String(\"*\"), map[string]interface{}{\n\t\"Value\": jsii.String(\"Bar\"),\n\t\"Export\": map[string]*string{\n\t\t\"Name\": jsii.String(\"ExportBaz\"),\n\t},\n})","version":"1"},"$":{"source":"template.hasOutput('*', {\n  Value: 'Bar',\n  Export: { Name: 'ExportBaz' },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":129}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Template#hasOutput"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\ntemplate.hasOutput('*', {\n  Value: 'Bar',\n  Export: { Name: 'ExportBaz' },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":3,"75":5,"193":2,"194":1,"196":1,"226":1,"281":3},"fqnsFingerprint":"e77a36ad54319a221bc231e24654b295f53959efbce4eb622581f1ad9feba1f5"},"de9c868af298be2c11b4e1554c6464056f204a882bccc0bb0da12fe1f3c84a23":{"translations":{"python":{"source":"result = template.find_outputs(\"*\", {\"Value\": \"Fred\"})\nexpect(result.Foo).to_equal({\"Value\": \"Fred\", \"Description\": \"FooFred\"})\nexpect(result.Bar).to_equal({\"Value\": \"Fred\", \"Description\": \"BarFred\"})","version":"2"},"csharp":{"source":"IDictionary<string, IDictionary<string, object>> result = template.FindOutputs(\"*\", new Dictionary<string, string> { { \"Value\", \"Fred\" } });\nExpect(result.Foo).ToEqual(new Dictionary<string, string> { { \"Value\", \"Fred\" }, { \"Description\", \"FooFred\" } });\nExpect(result.Bar).ToEqual(new Dictionary<string, string> { { \"Value\", \"Fred\" }, { \"Description\", \"BarFred\" } });","version":"1"},"java":{"source":"Map<String, Map<String, Object>> result = template.findOutputs(\"*\", Map.of(\"Value\", \"Fred\"));\nexpect(result.Foo).toEqual(Map.of(\"Value\", \"Fred\", \"Description\", \"FooFred\"));\nexpect(result.Bar).toEqual(Map.of(\"Value\", \"Fred\", \"Description\", \"BarFred\"));","version":"1"},"go":{"source":"result := template.FindOutputs(jsii.String(\"*\"), map[string]*string{\n\t\"Value\": jsii.String(\"Fred\"),\n})\nexpect(result.foo).toEqual(map[string]*string{\n\t\"Value\": jsii.String(\"Fred\"),\n\t\"Description\": jsii.String(\"FooFred\"),\n})\nexpect(result.bar).toEqual(map[string]*string{\n\t\"Value\": jsii.String(\"Fred\"),\n\t\"Description\": jsii.String(\"BarFred\"),\n})","version":"1"},"$":{"source":"const result = template.findOutputs('*', { Value: 'Fred' });\nexpect(result.Foo).toEqual({ Value: 'Fred', Description: 'FooFred' });\nexpect(result.Bar).toEqual({ Value: 'Fred', Description: 'BarFred' });","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":139}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Template#findOutputs"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst result = template.findOutputs('*', { Value: 'Fred' });\nexpect(result.Foo).toEqual({ Value: 'Fred', Description: 'FooFred' });\nexpect(result.Bar).toEqual({ Value: 'Fred', Description: 'BarFred' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":6,"75":16,"193":3,"194":5,"196":5,"225":1,"226":2,"242":1,"243":1,"281":5},"fqnsFingerprint":"10a451e0ffdbb33ebf3713293e324af0a9637bef50b34b1f4e660f8c960e9293"},"4e5351aa164e776ee980b5dc1ccaf73554e0f94f4f82ec9d50bb229d90bba6e6":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": {\n#           \"Wobble\": \"Flob\",\n#           \"Bob\": \"Cat\"\n#         }\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.object_like({\n        \"Wobble\": \"Flob\"\n    })\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.object_like({\n        \"Brew\": \"Coffee\"\n    })\n})","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//           \"Bob\": \"Cat\"\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.ObjectLike(new Dictionary<string, object> {\n        { \"Wobble\", \"Flob\" }\n    }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.ObjectLike(new Dictionary<string, object> {\n        { \"Brew\", \"Coffee\" }\n    }) }\n});","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//           \"Bob\": \"Cat\"\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.objectLike(Map.of(\n                \"Wobble\", \"Flob\"))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.objectLike(Map.of(\n                \"Brew\", \"Coffee\"))));","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//           \"Bob\": \"Cat\"\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]matcher{\n\t\"Fred\": awscdkassertions.Match_objectLike(map[string]interface{}{\n\t\t\"Wobble\": jsii.String(\"Flob\"),\n\t}),\n})\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]matcher{\n\t\"Fred\": awscdkassertions.Match_objectLike(map[string]interface{}{\n\t\t\"Brew\": jsii.String(\"Coffee\"),\n\t}),\n})","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//           \"Bob\": \"Cat\"\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Wobble: 'Flob',\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Brew: 'Coffee',\n  }),\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":163}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Match#objectLike","@aws-cdk/assertions.Matcher","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//           \"Bob\": \"Cat\"\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Wobble: 'Flob',\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Brew: 'Coffee',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":12,"193":4,"194":4,"196":4,"226":2,"281":4},"fqnsFingerprint":"e1534b5a4902ce8b7b783f10075047ec081450bce66805026912ea049d8898e5"},"2532cb121c4882fc153e7e2122edf61174bc495060cb87f16797677bc740db56":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": {\n#           \"Wobble\": \"Flob\",\n#         }\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.object_like({\n        \"Bob\": Match.absent()\n    })\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.object_like({\n        \"Wobble\": Match.absent()\n    })\n})","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.ObjectLike(new Dictionary<string, object> {\n        { \"Bob\", Match.Absent() }\n    }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.ObjectLike(new Dictionary<string, object> {\n        { \"Wobble\", Match.Absent() }\n    }) }\n});","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.objectLike(Map.of(\n                \"Bob\", Match.absent()))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.objectLike(Map.of(\n                \"Wobble\", Match.absent()))));","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]matcher{\n\t\"Fred\": awscdkassertions.Match_objectLike(map[string]interface{}{\n\t\t\"Bob\": awscdkassertions.Match_absent(),\n\t}),\n})\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]matcher{\n\t\"Fred\": awscdkassertions.Match_objectLike(map[string]interface{}{\n\t\t\"Wobble\": awscdkassertions.Match_absent(),\n\t}),\n})","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Bob: Match.absent(),\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Wobble: Match.absent(),\n  }),\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":203}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Match#absent","@aws-cdk/assertions.Match#objectLike","@aws-cdk/assertions.Matcher","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Bob: Match.absent(),\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Wobble: Match.absent(),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":16,"193":4,"194":6,"196":6,"226":2,"281":4},"fqnsFingerprint":"62e6b51d07b3c867ecad4286fdd2bfc61f12bc5b9e09cd24c94c25896e1df512"},"5950a288c5f7cf77e92ebf635ca0174d315ad9090621eebb2e5d5b512f56e6a7":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": {\n#           \"Wobble\": [\"Flob\", \"Flib\"],\n#         }\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": {\n        \"Wobble\": [Match.any_value(), Match.any_value()]\n    }\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": {\n        \"Wimble\": Match.any_value()\n    }\n})","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": [\"Flob\", \"Flib\"],\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, IDictionary<string, Matcher[]>> {\n    { \"Fred\", new Struct {\n        Wobble = new [] { Match.AnyValue(), Match.AnyValue() }\n    } }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, IDictionary<string, Matcher>> {\n    { \"Fred\", new Struct {\n        Wimble = Match.AnyValue()\n    } }\n});","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": [\"Flob\", \"Flib\"],\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Map.of(\n                \"Wobble\", List.of(Match.anyValue(), Match.anyValue()))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Map.of(\n                \"Wimble\", Match.anyValue())));","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": [\"Flob\", \"Flib\"],\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]map[string][]matcher{\n\t\"Fred\": map[string][]matcher{\n\t\t\"Wobble\": []matcher{\n\t\t\tawscdkassertions.Match_anyValue(),\n\t\t\tawscdkassertions.Match_anyValue(),\n\t\t},\n\t},\n})\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]map[string]matcher{\n\t\"Fred\": map[string]matcher{\n\t\t\"Wimble\": awscdkassertions.Match_anyValue(),\n\t},\n})","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": [\"Flob\", \"Flib\"],\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: {\n    Wobble: [ Match.anyValue(), Match.anyValue() ],\n  },\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: {\n    Wimble: Match.anyValue(),\n  },\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":239}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Match#anyValue","@aws-cdk/assertions.Matcher","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": [\"Flob\", \"Flib\"],\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: {\n    Wobble: [ Match.anyValue(), Match.anyValue() ],\n  },\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: {\n    Wimble: Match.anyValue(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":14,"192":1,"193":4,"194":5,"196":5,"226":2,"281":4},"fqnsFingerprint":"d5792ef0b4a6e14aa4c6091982a0bae4fbdbec1407c65132fafdcdca65a4e533"},"8f767a3048701f687338aadbd1611e96a647cf5e7e11bac52aa0138eb5f9234e":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": [\"Flob\", \"Cat\"]\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.array_with([\"Flob\"])\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", Match.object_like({\n    \"Fred\": Match.array_with([\"Wobble\"])\n}))","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.ArrayWith(new [] { \"Flob\" }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", Match.ObjectLike(new Dictionary<string, object> {\n    { \"Fred\", Match.ArrayWith(new [] { \"Wobble\" }) }\n}));","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.arrayWith(List.of(\"Flob\"))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Match.objectLike(Map.of(\n        \"Fred\", Match.arrayWith(List.of(\"Wobble\")))));","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]matcher{\n\t\"Fred\": awscdkassertions.Match_arrayWith([]interface{}{\n\t\tjsii.String(\"Flob\"),\n\t}),\n})\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), awscdkassertions.Match_ObjectLike(map[string]interface{}{\n\t\"Fred\": awscdkassertions.Match_arrayWith([]interface{}{\n\t\tjsii.String(\"Wobble\"),\n\t}),\n}))","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.arrayWith(['Flob']),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', Match.objectLike({\n  Fred: Match.arrayWith(['Wobble']),\n}));","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":275}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Match#arrayWith","@aws-cdk/assertions.Match#objectLike","@aws-cdk/assertions.Matcher","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.arrayWith(['Flob']),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', Match.objectLike({\n  Fred: Match.arrayWith(['Wobble']),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":12,"192":2,"193":2,"194":5,"196":5,"226":2,"281":2},"fqnsFingerprint":"2e92c9264f1ef701531cde8b23f7beea8b14c0d561451ec5a9c7d5554f6e8305"},"eb2f7026f3ce0dac36105ad4c2e6ec491b7be110f8fac975787565220d7ec4ff":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Template\": \"const includeHeaders = true;\"\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Template\": Match.string_like_regexp(\"includeHeaders = (true|false)\")\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Template\": Match.string_like_regexp(\"includeHeaders = null\")\n})","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Template\": \"const includeHeaders = true;\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Template\", Match.StringLikeRegexp(\"includeHeaders = (true|false)\") }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Template\", Match.StringLikeRegexp(\"includeHeaders = null\") }\n});","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Template\": \"const includeHeaders = true;\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Template\", Match.stringLikeRegexp(\"includeHeaders = (true|false)\")));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Template\", Match.stringLikeRegexp(\"includeHeaders = null\")));","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Template\": \"const includeHeaders = true;\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]matcher{\n\t\"Template\": awscdkassertions.Match_stringLikeRegexp(jsii.String(\"includeHeaders = (true|false)\")),\n})\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]matcher{\n\t\"Template\": awscdkassertions.Match_stringLikeRegexp(jsii.String(\"includeHeaders = null\")),\n})","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Template\": \"const includeHeaders = true;\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Template: Match.stringLikeRegexp('includeHeaders = (true|false)'),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Template: Match.stringLikeRegexp('includeHeaders = null'),\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":310}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Match#stringLikeRegexp","@aws-cdk/assertions.Matcher","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Template\": \"const includeHeaders = true;\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Template: Match.stringLikeRegexp('includeHeaders = (true|false)'),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Template: Match.stringLikeRegexp('includeHeaders = null'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":10,"193":2,"194":4,"196":4,"226":2,"281":2},"fqnsFingerprint":"abb96c446ee1b0857fabf29d42a16e523fb3db84f00846f2495b0bd09cae5589"},"e63bc21e4835c3b9088c41a35382b07204fd92caf5387001869d2b643a866456":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": [\"Flob\", \"Cat\"]\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.not([\"Flob\"])\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", Match.object_like({\n    \"Fred\": Match.not([\"Flob\", \"Cat\"])\n}))","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.Not(new [] { \"Flob\" }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", Match.ObjectLike(new Dictionary<string, object> {\n    { \"Fred\", Match.Not(new [] { \"Flob\", \"Cat\" }) }\n}));","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.not(List.of(\"Flob\"))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Match.objectLike(Map.of(\n        \"Fred\", Match.not(List.of(\"Flob\", \"Cat\")))));","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]matcher{\n\t\"Fred\": awscdkassertions.Match_not([]interface{}{\n\t\tjsii.String(\"Flob\"),\n\t}),\n})\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), awscdkassertions.Match_ObjectLike(map[string]interface{}{\n\t\"Fred\": awscdkassertions.Match_not([]interface{}{\n\t\tjsii.String(\"Flob\"),\n\t\tjsii.String(\"Cat\"),\n\t}),\n}))","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.not(['Flob']),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', Match.objectLike({\n  Fred: Match.not(['Flob', 'Cat']),\n}));","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":339}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Match#not","@aws-cdk/assertions.Match#objectLike","@aws-cdk/assertions.Matcher","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.not(['Flob']),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', Match.objectLike({\n  Fred: Match.not(['Flob', 'Cat']),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":12,"192":2,"193":2,"194":5,"196":5,"226":2,"281":2},"fqnsFingerprint":"0e29c7a9122ba03a88344ab50f7d18b08e8cd9948a7242075146e880a70376c5"},"086cfa3a931d45be31b7eb1d228573e18872db9770a1b8b53899730ca35f7d9c":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Baz\": Match.serialized_json({\n        \"Fred\": Match.array_with([\"Waldo\"])\n    })\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Baz\": Match.serialized_json({\n        \"Fred\": [\"Waldo\", \"Johnny\"]\n    })\n})","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Baz\", Match.SerializedJson(new Dictionary<string, Matcher> {\n        { \"Fred\", Match.ArrayWith(new [] { \"Waldo\" }) }\n    }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Baz\", Match.SerializedJson(new Dictionary<string, string[]> {\n        { \"Fred\", new [] { \"Waldo\", \"Johnny\" } }\n    }) }\n});","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Baz\", Match.serializedJson(Map.of(\n                \"Fred\", Match.arrayWith(List.of(\"Waldo\"))))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Baz\", Match.serializedJson(Map.of(\n                \"Fred\", List.of(\"Waldo\", \"Johnny\")))));","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]matcher{\n\t\"Baz\": awscdkassertions.Match_serializedJson(map[string]matcher{\n\t\t\"Fred\": awscdkassertions.Match_arrayWith([]interface{}{\n\t\t\tjsii.String(\"Waldo\"),\n\t\t}),\n\t}),\n})\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]matcher{\n\t\"Baz\": awscdkassertions.Match_serializedJson(map[string][]*string{\n\t\t\"Fred\": []*string{\n\t\t\tjsii.String(\"Waldo\"),\n\t\t\tjsii.String(\"Johnny\"),\n\t\t},\n\t}),\n})","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: Match.arrayWith([\"Waldo\"]),\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: [\"Waldo\", \"Johnny\"],\n  }),\n});","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":373}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Match#arrayWith","@aws-cdk/assertions.Match#serializedJson","@aws-cdk/assertions.Matcher","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: Match.arrayWith([\"Waldo\"]),\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: [\"Waldo\", \"Johnny\"],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":5,"75":14,"192":2,"193":4,"194":5,"196":5,"226":2,"281":4},"fqnsFingerprint":"cc53fc2cce0a796d38eacf015dc9c48cf3189fc77633493456ae66fa266c06e7"},"28b98c9e58bffa636ed5cc0e5533eb16451dee711a4355823cef45cfb3f3a10d":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": [\"Flob\", \"Cat\"],\n#         \"Waldo\": [\"Qix\", \"Qux\"],\n#       }\n#     }\n#   }\n# }\n\nfred_capture = Capture()\nwaldo_capture = Capture()\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": fred_capture,\n    \"Waldo\": [\"Qix\", waldo_capture]\n})\n\nfred_capture.as_array() # returns [\"Flob\", \"Cat\"]\nwaldo_capture.as_string()","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//         \"Waldo\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nvar fredCapture = new Capture();\nvar waldoCapture = new Capture();\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, object> {\n    { \"Fred\", fredCapture },\n    { \"Waldo\", new [] { \"Qix\", waldoCapture } }\n});\n\nfredCapture.AsArray(); // returns [\"Flob\", \"Cat\"]\nwaldoCapture.AsString();","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//         \"Waldo\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nCapture fredCapture = new Capture();\nCapture waldoCapture = new Capture();\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", fredCapture,\n        \"Waldo\", List.of(\"Qix\", waldoCapture)));\n\nfredCapture.asArray(); // returns [\"Flob\", \"Cat\"]\nwaldoCapture.asString();","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//         \"Waldo\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nfredCapture := awscdkassertions.NewCapture()\nwaldoCapture := awscdkassertions.NewCapture()\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]interface{}{\n\t\"Fred\": fredCapture,\n\t\"Waldo\": []interface{}{\n\t\tjsii.String(\"Qix\"),\n\t\twaldoCapture,\n\t},\n})\n\nfredCapture.AsArray() // returns [\"Flob\", \"Cat\"]\nwaldoCapture.AsString()","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//         \"Waldo\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\nconst waldoCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n  Waldo: [\"Qix\", waldoCapture],\n});\n\nfredCapture.asArray(); // returns [\"Flob\", \"Cat\"]\nwaldoCapture.asString(); // returns \"Qux\"","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":410}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Capture","@aws-cdk/assertions.Capture#asArray","@aws-cdk/assertions.Capture#asString","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//         \"Waldo\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\nconst waldoCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n  Waldo: [\"Qix\", waldoCapture],\n});\n\nfredCapture.asArray(); // returns [\"Flob\", \"Cat\"]\nwaldoCapture.asString();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":14,"192":1,"193":1,"194":3,"196":3,"197":2,"225":2,"226":3,"242":2,"243":2,"281":2},"fqnsFingerprint":"ce3605ee9ea6d23b5f99eb15e5c450231c46baa630f4592743d3e9c6b05cc88d"},"f47edc85bd16034ca71c3d047d9bb63cfbff0f832d1a2e713ad331b5b94974ed":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar1\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": [\"Flob\", \"Cat\"],\n#       }\n#     }\n#     \"MyBar2\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": [\"Qix\", \"Qux\"],\n#       }\n#     }\n#   }\n# }\n\ncapture = Capture(Match.array_with([\"Cat\"]))\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": capture\n})\n\ncapture.as_array()","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar1\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//       }\n//     }\n//     \"MyBar2\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nvar capture = new Capture(Match.ArrayWith(new [] { \"Cat\" }));\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Capture> {\n    { \"Fred\", capture }\n});\n\ncapture.AsArray();","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar1\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//       }\n//     }\n//     \"MyBar2\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nCapture capture = new Capture(Match.arrayWith(List.of(\"Cat\")));\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", capture));\n\ncapture.asArray();","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar1\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//       }\n//     }\n//     \"MyBar2\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\ncapture := awscdkassertions.NewCapture(awscdkassertions.Match_ArrayWith([]interface{}{\n\tjsii.String(\"Cat\"),\n}))\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]capture{\n\t\"Fred\": capture,\n})\n\ncapture.AsArray()","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar1\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//       }\n//     }\n//     \"MyBar2\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nconst capture = new Capture(Match.arrayWith(['Cat']));\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: capture,\n});\n\ncapture.asArray(); // returns ['Flob', 'Cat']","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":439}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Capture","@aws-cdk/assertions.Capture#asArray","@aws-cdk/assertions.Match#arrayWith","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar1\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//       }\n//     }\n//     \"MyBar2\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nconst capture = new Capture(Match.arrayWith(['Cat']));\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: capture,\n});\n\ncapture.asArray();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":10,"192":1,"193":1,"194":3,"196":3,"197":1,"225":1,"226":2,"242":1,"243":1,"281":1},"fqnsFingerprint":"f7f1cdf8ea1a14a7d72fbf4b7ae63e564c80320860d97e8c56cb89fee2304c8e"},"1b2bd16700b90e164f454e00b81335e322f93b80e8aa49bbaee164db34b5ca2c":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": \"Flob\",\n#       }\n#     },\n#     \"MyBaz\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": \"Quib\",\n#       }\n#     }\n#   }\n# }\n\nfred_capture = Capture()\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": fred_capture\n})\n\nfred_capture.as_string() # returns \"Flob\"\nfred_capture.next() # returns true\nfred_capture.as_string()","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nvar fredCapture = new Capture();\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Capture> {\n    { \"Fred\", fredCapture }\n});\n\nfredCapture.AsString(); // returns \"Flob\"\nfredCapture.Next(); // returns true\nfredCapture.AsString();","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nCapture fredCapture = new Capture();\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", fredCapture));\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next(); // returns true\nfredCapture.asString();","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nfredCapture := awscdkassertions.NewCapture()\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]capture{\n\t\"Fred\": fredCapture,\n})\n\nfredCapture.AsString() // returns \"Flob\"\nfredCapture.Next() // returns true\nfredCapture.AsString()","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n});\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next();     // returns true\nfredCapture.asString(); // returns \"Quib\"","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":470}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Capture","@aws-cdk/assertions.Capture#asString","@aws-cdk/assertions.Capture#next","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n});\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next();     // returns true\nfredCapture.asString();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":12,"193":1,"194":4,"196":4,"197":1,"225":1,"226":4,"242":1,"243":1,"281":1},"fqnsFingerprint":"1d71f0c610a16a46c8c12666a6b069d6b67fd040cd8aa44e736c5a10075c3455"},"d4277de259ee1f622a64243a9b54deba9c4953d6f1d07cb1e941323a4bbb18b9":{"translations":{"python":{"source":"import aws_cdk.core as cdk\nfrom constructs import Construct, IConstruct\n\nclass MyAspect(cdk.IAspect):\n    def visit(self, node):\n        if node instanceof cdk.CfnResource && node.cfn_resource_type == \"Foo::Bar\":\n            self.error(node, \"we do not want a Foo::Bar resource\")\n\n    def error(self, node, message):\n        cdk.Annotations.of(node).add_error(message)\n\nclass MyStack(cdk.Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        stack = cdk.Stack()\n        cdk.CfnResource(stack, \"Foo\",\n            type=\"Foo::Bar\",\n            properties={\n                \"Fred\": \"Thud\"\n            }\n        )\n        cdk.Aspects.of(stack).add(MyAspect())","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Constructs;\n\nclass MyAspect : IAspect\n{\n    public void Visit(IConstruct node)\n    {\n        if (node instanceof CfnResource && node.CfnResourceType == \"Foo::Bar\")\n        {\n            Error(node, \"we do not want a Foo::Bar resource\");\n        }\n    }\n\n    protected void Error(IConstruct node, string message)\n    {\n        Annotations.Of(node).AddError(message);\n    }\n}\n\nclass MyStack : Stack\n{\n    public MyStack(Construct scope, string id) : base(scope, id)\n    {\n\n        var stack = new Stack();\n        new CfnResource(stack, \"Foo\", new CfnResourceProps {\n            Type = \"Foo::Bar\",\n            Properties = new Dictionary<string, object> {\n                { \"Fred\", \"Thud\" }\n            }\n        });\n        Aspects.Of(stack).Add(new MyAspect());\n    }\n}","version":"1"},"java":{"source":"import software.amazon.awscdk.core.*;\nimport software.constructs.Construct;\nimport software.constructs.IConstruct;\n\npublic class MyAspect implements IAspect {\n    public void visit(IConstruct node) {\n        if (node instanceof CfnResource && node.getCfnResourceType() == \"Foo::Bar\") {\n            this.error(node, \"we do not want a Foo::Bar resource\");\n        }\n    }\n\n    public void error(IConstruct node, String message) {\n        Annotations.of(node).addError(message);\n    }\n}\n\npublic class MyStack extends Stack {\n    public MyStack(Construct scope, String id) {\n        super(scope, id);\n\n        Stack stack = new Stack();\n        CfnResource.Builder.create(stack, \"Foo\")\n                .type(\"Foo::Bar\")\n                .properties(Map.of(\n                        \"Fred\", \"Thud\"))\n                .build();\n        Aspects.of(stack).add(new MyAspect());\n    }\n}","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws/constructs-go/constructs\"\n\ntype myAspect struct {\n}\n\nfunc (this *myAspect) visit(node iConstruct) {\n\tif *node instanceof cdk.CfnResource && *node.CfnResourceType == \"Foo::Bar\" {\n\t\tthis.error(*node, jsii.String(\"we do not want a Foo::Bar resource\"))\n\t}\n}\n\nfunc (this *myAspect) error(node iConstruct, message *string) {\n\tcdk.Annotations_Of(*node).AddError(*message)\n}\n\ntype myStack struct {\n\tstack\n}\n\nfunc newMyStack(scope construct, id *string) *myStack {\n\tthis := &myStack{}\n\tcdk.NewStack_Override(this, scope, id)\n\n\tstack := cdk.NewStack()\n\tcdk.NewCfnResource(stack, jsii.String(\"Foo\"), &CfnResourceProps{\n\t\tType: jsii.String(\"Foo::Bar\"),\n\t\tProperties: map[string]interface{}{\n\t\t\t\"Fred\": jsii.String(\"Thud\"),\n\t\t},\n\t})\n\tcdk.Aspects_Of(stack).Add(NewMyAspect())\n\treturn this\n}","version":"1"},"$":{"source":"import * as cdk from '@aws-cdk/core';\nimport { Construct, IConstruct } from 'constructs';\n\nclass MyAspect implements cdk.IAspect {\n  public visit(node: IConstruct): void {\n    if (node instanceof cdk.CfnResource && node.cfnResourceType === 'Foo::Bar') {\n      this.error(node, 'we do not want a Foo::Bar resource');\n    }\n  }\n\n  protected error(node: IConstruct, message: string): void {\n    cdk.Annotations.of(node).addError(message);\n  }\n}\n\nclass MyStack extends cdk.Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new cdk.Stack();\n    new cdk.CfnResource(stack, 'Foo', {\n      type: 'Foo::Bar',\n      properties: {\n        Fred: 'Thud',\n      },\n    });\n    cdk.Aspects.of(stack).add(new MyAspect());\n  }\n}","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":508}},"didCompile":true,"fqnsReferenced":["@aws-cdk/core.Annotations","@aws-cdk/core.Annotations#addError","@aws-cdk/core.Annotations#of","@aws-cdk/core.Aspects","@aws-cdk/core.Aspects#add","@aws-cdk/core.Aspects#of","@aws-cdk/core.CfnResource","@aws-cdk/core.CfnResource#cfnResourceType","@aws-cdk/core.CfnResourceProps","@aws-cdk/core.IAspect","@aws-cdk/core.IConstruct","@aws-cdk/core.Stack","constructs.Construct","constructs.IConstruct"],"fullSource":"import * as cdk from '@aws-cdk/core';\nimport { Construct, IConstruct } from 'constructs';\n\nclass MyAspect implements cdk.IAspect {\n  public visit(node: IConstruct): void {\n    if (node instanceof cdk.CfnResource && node.cfnResourceType === 'Foo::Bar') {\n      this.error(node, 'we do not want a Foo::Bar resource');\n    }\n  }\n\n  protected error(node: IConstruct, message: string): void {\n    cdk.Annotations.of(node).addError(message);\n  }\n}\n\nclass MyStack extends cdk.Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new cdk.Stack();\n    new cdk.CfnResource(stack, 'Foo', {\n      type: 'Foo::Bar',\n      properties: {\n        Fred: 'Thud',\n      },\n    });\n    cdk.Aspects.of(stack).add(new MyAspect());\n  }\n}","syntaxKindCounter":{"10":7,"36":1,"55":1,"75":49,"98":1,"102":1,"104":1,"110":2,"118":1,"119":1,"143":2,"156":5,"161":2,"162":1,"169":3,"193":2,"194":13,"196":6,"197":3,"209":3,"216":2,"223":4,"225":1,"226":5,"227":1,"242":1,"243":1,"245":2,"254":2,"255":2,"256":1,"257":1,"258":2,"279":2,"281":3,"290":1},"fqnsFingerprint":"b1302fbdf0b283a38a60b46eced67f27a66f4bf1d036f48e822a5e5b93dbf618"},"4b69db3cd62bea054f9d35115546988dd2fc87a39392a5fb9588ba1684d54fb6":{"translations":{"python":{"source":"# import { Annotations } from '@aws-cdk/assertions';\n\nAnnotations.from_stack(stack).has_error(\"/Default/Foo\", \"we do not want a Foo::Bar resource\")","version":"2"},"csharp":{"source":"// import { Annotations } from '@aws-cdk/assertions';\n\nAnnotations.FromStack(stack).HasError(\"/Default/Foo\", \"we do not want a Foo::Bar resource\");","version":"1"},"java":{"source":"// import { Annotations } from '@aws-cdk/assertions';\n\nAnnotations.fromStack(stack).hasError(\"/Default/Foo\", \"we do not want a Foo::Bar resource\");","version":"1"},"go":{"source":"// import { Annotations } from '@aws-cdk/assertions';\n\nawscdkassertions.Annotations_FromStack(stack).HasError(jsii.String(\"/Default/Foo\"), jsii.String(\"we do not want a Foo::Bar resource\"))","version":"1"},"$":{"source":"// import { Annotations } from '@aws-cdk/assertions';\n\nAnnotations.fromStack(stack).hasError(\n  '/Default/Foo',\n  'we do not want a Foo::Bar resource',\n);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":542}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Annotations#fromStack","@aws-cdk/assertions.Annotations#hasError","@aws-cdk/core.Stack"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// import { Annotations } from '@aws-cdk/assertions';\n\nAnnotations.fromStack(stack).hasError(\n  '/Default/Foo',\n  'we do not want a Foo::Bar resource',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":4,"194":2,"196":2,"226":1},"fqnsFingerprint":"00f0b9a13b6c1354fb1309eced8aa101fe2f1dadf17d35ed7542eb04616dcc73"},"b656eb78a681f3f41799a1a9441061d90ae6d2f3527dc92fb2e8ff11b31ee835":{"translations":{"python":{"source":"Annotations.from_stack(stack).has_error(\"/Default/Foo\",\n    Match.string_like_regexp(\".*Foo::Bar.*\"))","version":"2"},"csharp":{"source":"Annotations.FromStack(stack).HasError(\"/Default/Foo\", Match.StringLikeRegexp(\".*Foo::Bar.*\"));","version":"1"},"java":{"source":"Annotations.fromStack(stack).hasError(\"/Default/Foo\", Match.stringLikeRegexp(\".*Foo::Bar.*\"));","version":"1"},"go":{"source":"awscdkassertions.Annotations_FromStack(stack).HasError(jsii.String(\"/Default/Foo\"), awscdkassertions.Match_StringLikeRegexp(jsii.String(\".*Foo::Bar.*\")))","version":"1"},"$":{"source":"Annotations.fromStack(stack).hasError(\n  '/Default/Foo',\n  Match.stringLikeRegexp('.*Foo::Bar.*'),\n);","version":"0"}},"location":{"api":{"api":"moduleReadme","moduleFqn":"@aws-cdk/assertions"},"field":{"field":"markdown","line":563}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Annotations#fromStack","@aws-cdk/assertions.Annotations#hasError","@aws-cdk/assertions.Match#stringLikeRegexp","@aws-cdk/core.Stack"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\nAnnotations.fromStack(stack).hasError(\n  '/Default/Foo',\n  Match.stringLikeRegexp('.*Foo::Bar.*'),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":2,"75":6,"194":3,"196":3,"226":1},"fqnsFingerprint":"07a1e7322e90e532df723eef48cb9834e8d98b69d8f5c6961ba4b7f76f681f80"},"cfb11064b64c6bd7070441e6aa840f6c57772fddb384383507debb4e84d1b198":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assertions as assertions\nimport aws_cdk.core as cdk\n\n# stack: cdk.Stack\n\nannotations = assertions.Annotations.from_stack(stack)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assertions;\nusing Amazon.CDK;\n\nStack stack;\nvar annotations = Annotations.FromStack(stack);","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assertions.*;\nimport software.amazon.awscdk.core.*;\n\nStack stack;\n\nAnnotations annotations = Annotations.fromStack(stack);","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport assertions \"github.com/aws-samples/dummy/awscdkassertions\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar stack stack\n\nannotations := assertions.Annotations_FromStack(stack)","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assertions from '@aws-cdk/assertions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const stack: cdk.Stack;\nconst annotations = assertions.Annotations.fromStack(stack);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/assertions.Annotations"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Annotations","@aws-cdk/assertions.Annotations#fromStack","@aws-cdk/core.Stack"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assertions from '@aws-cdk/assertions';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const stack: cdk.Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst annotations = assertions.Annotations.fromStack(stack);\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":2,"75":10,"130":1,"153":1,"169":1,"194":2,"196":1,"225":2,"242":2,"243":2,"254":2,"255":2,"256":2,"290":1},"fqnsFingerprint":"6d2cddd84adb584d8a30b4a5e85c240ad04585f44fa23a5a86b7cede3a83bd5e"},"dd9758a501fc985a7fd616be29a1d95c8253eeea80b3cb4c7f65a109b0e9cd7e":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": \"Flob\",\n#       }\n#     },\n#     \"MyBaz\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": \"Quib\",\n#       }\n#     }\n#   }\n# }\n\nfred_capture = Capture()\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": fred_capture\n})\n\nfred_capture.as_string() # returns \"Flob\"\nfred_capture.next() # returns true\nfred_capture.as_string()","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nvar fredCapture = new Capture();\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Capture> {\n    { \"Fred\", fredCapture }\n});\n\nfredCapture.AsString(); // returns \"Flob\"\nfredCapture.Next(); // returns true\nfredCapture.AsString();","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nCapture fredCapture = new Capture();\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", fredCapture));\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next(); // returns true\nfredCapture.asString();","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nfredCapture := awscdkassertions.NewCapture()\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]capture{\n\t\"Fred\": fredCapture,\n})\n\nfredCapture.AsString() // returns \"Flob\"\nfredCapture.Next() // returns true\nfredCapture.AsString()","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n});\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next();     // returns true\nfredCapture.asString(); // returns \"Quib\"","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/assertions.Capture"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Capture","@aws-cdk/assertions.Capture#asString","@aws-cdk/assertions.Capture#next","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n});\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next();     // returns true\nfredCapture.asString();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":1,"75":12,"193":1,"194":4,"196":4,"197":1,"225":1,"226":4,"242":1,"243":1,"281":1},"fqnsFingerprint":"1d71f0c610a16a46c8c12666a6b069d6b67fd040cd8aa44e736c5a10075c3455"},"8c883ccea9c54e50fdc14511ab5eace30e1779cbf7b67cfec799bbb7aee022a3":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assertions as assertions\n\n# capture: assertions.Capture\n# value: Any\n\nmatch_capture = assertions.MatchCapture(\n    capture=capture,\n    value=value\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assertions;\n\nCapture capture;\nvar value;\n\nvar matchCapture = new MatchCapture {\n    Capture = capture,\n    Value = value\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assertions.*;\n\nCapture capture;\nObject value;\n\nMatchCapture matchCapture = MatchCapture.builder()\n        .capture(capture)\n        .value(value)\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport assertions \"github.com/aws-samples/dummy/awscdkassertions\"\n\nvar capture capture\nvar value interface{}\n\nmatchCapture := &MatchCapture{\n\tCapture: capture,\n\tValue: value,\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assertions from '@aws-cdk/assertions';\n\ndeclare const capture: assertions.Capture;\ndeclare const value: any;\nconst matchCapture: assertions.MatchCapture = {\n  capture: capture,\n  value: value,\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/assertions.MatchCapture"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Capture","@aws-cdk/assertions.MatchCapture"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assertions from '@aws-cdk/assertions';\n\ndeclare const capture: assertions.Capture;\ndeclare const value: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst matchCapture: assertions.MatchCapture = {\n  capture: capture,\n  value: value,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":1,"75":12,"125":1,"130":2,"153":2,"169":2,"193":1,"225":3,"242":3,"243":3,"254":1,"255":1,"256":1,"281":2,"290":1},"fqnsFingerprint":"c4d967d2e87ca347579e3d70d3a00d1f84bdb700c8a632195d2620de9a771b5c"},"24f75ab71c57aa9d111aec370bd110f18e8e026a40dfe06cad972eeb5690b609":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assertions as assertions\n\n# matcher: assertions.Matcher\n\nmatch_failure = assertions.MatchFailure(\n    matcher=matcher,\n    message=\"message\",\n    path=[\"path\"]\n)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assertions;\n\nMatcher matcher;\n\nvar matchFailure = new MatchFailure {\n    Matcher = matcher,\n    Message = \"message\",\n    Path = new [] { \"path\" }\n};","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assertions.*;\n\nMatcher matcher;\n\nMatchFailure matchFailure = MatchFailure.builder()\n        .matcher(matcher)\n        .message(\"message\")\n        .path(List.of(\"path\"))\n        .build();","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport assertions \"github.com/aws-samples/dummy/awscdkassertions\"\n\nvar matcher matcher\n\nmatchFailure := &MatchFailure{\n\tMatcher: matcher,\n\tMessage: jsii.String(\"message\"),\n\tPath: []*string{\n\t\tjsii.String(\"path\"),\n\t},\n}","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assertions from '@aws-cdk/assertions';\n\ndeclare const matcher: assertions.Matcher;\nconst matchFailure: assertions.MatchFailure = {\n  matcher: matcher,\n  message: 'message',\n  path: ['path'],\n};","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/assertions.MatchFailure"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.MatchFailure","@aws-cdk/assertions.Matcher"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assertions from '@aws-cdk/assertions';\n\ndeclare const matcher: assertions.Matcher;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst matchFailure: assertions.MatchFailure = {\n  matcher: matcher,\n  message: 'message',\n  path: ['path'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":3,"75":11,"130":1,"153":2,"169":2,"192":1,"193":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"281":3,"290":1},"fqnsFingerprint":"3bca3b1805a0e6171b4f5028ff17ae3b51128f74c4d76c213370ab3ba443261f"},"024877bc0dcf08cae9d298b022b78c29fad1a48b768f43b49fd6e7118d22250b":{"translations":{"python":{"source":"# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.assertions as assertions\n\n# target: Any\n\nmatch_result = assertions.MatchResult(target)","version":"2"},"csharp":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Assertions;\n\nvar target;\n\nvar matchResult = new MatchResult(target);","version":"1"},"java":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.assertions.*;\n\nObject target;\n\nMatchResult matchResult = new MatchResult(target);","version":"1"},"go":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport assertions \"github.com/aws-samples/dummy/awscdkassertions\"\n\nvar target interface{}\n\nmatchResult := assertions.NewMatchResult(target)","version":"1"},"$":{"source":"// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assertions from '@aws-cdk/assertions';\n\ndeclare const target: any;\nconst matchResult = new assertions.MatchResult(target);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/assertions.MatchResult"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.MatchResult"],"fullSource":"// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as assertions from '@aws-cdk/assertions';\n\ndeclare const target: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst matchResult = new assertions.MatchResult(target);\n/// !hide\n// Code snippet ended before !hide marker above\n} }","syntaxKindCounter":{"10":1,"75":6,"125":1,"130":1,"194":1,"197":1,"225":2,"242":2,"243":2,"254":1,"255":1,"256":1,"290":1},"fqnsFingerprint":"474ba8973957c5f85296ee14cb7ce665970e900cc52393f29c64f36d2f300e30"},"1260c2a6e71283f465d9e111e2157d73962f72af1b7793844f9287fbb24ee69f":{"translations":{"python":{"source":"# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": [\"Flob\", \"Cat\"]\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.array_with([\"Flob\"])\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", Match.object_like({\n    \"Fred\": Match.array_with([\"Wobble\"])\n}))","version":"2"},"csharp":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.ArrayWith(new [] { \"Flob\" }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", Match.ObjectLike(new Dictionary<string, object> {\n    { \"Fred\", Match.ArrayWith(new [] { \"Wobble\" }) }\n}));","version":"1"},"java":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.arrayWith(List.of(\"Flob\"))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Match.objectLike(Map.of(\n        \"Fred\", Match.arrayWith(List.of(\"Wobble\")))));","version":"1"},"go":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), map[string]matcher{\n\t\"Fred\": awscdkassertions.Match_arrayWith([]interface{}{\n\t\tjsii.String(\"Flob\"),\n\t}),\n})\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(jsii.String(\"Foo::Bar\"), awscdkassertions.Match_ObjectLike(map[string]interface{}{\n\t\"Fred\": awscdkassertions.Match_arrayWith([]interface{}{\n\t\tjsii.String(\"Wobble\"),\n\t}),\n}))","version":"1"},"$":{"source":"// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.arrayWith(['Flob']),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', Match.objectLike({\n  Fred: Match.arrayWith(['Wobble']),\n}));","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/assertions.Matcher"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Match#arrayWith","@aws-cdk/assertions.Match#objectLike","@aws-cdk/assertions.Matcher","@aws-cdk/assertions.Template#hasResourceProperties"],"fullSource":"// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Aspects, CfnResource, Stack } from '@aws-cdk/core';\nimport { Annotations, Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.arrayWith(['Flob']),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', Match.objectLike({\n  Fred: Match.arrayWith(['Wobble']),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n","syntaxKindCounter":{"10":4,"75":12,"192":2,"193":2,"194":5,"196":5,"226":2,"281":2},"fqnsFingerprint":"2e92c9264f1ef701531cde8b23f7beea8b14c0d561451ec5a9c7d5554f6e8305"},"def2cd646590e4acdabdf036c8abd2108e8fa8cb33f4efed97838a07679321fb":{"translations":{"python":{"source":"from aws_cdk.core import Stack\nfrom aws_cdk.assertions import Template\n\nstack = Stack()\n# ...\ntemplate = Template.from_stack(stack)","version":"2"},"csharp":{"source":"using Amazon.CDK;\nusing Amazon.CDK.Assertions;\n\nvar stack = new Stack();\n// ...\nvar template = Template.FromStack(stack);","version":"1"},"java":{"source":"import software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.assertions.Template;\n\nStack stack = new Stack();\n// ...\nTemplate template = Template.fromStack(stack);","version":"1"},"go":{"source":"import \"github.com/aws-samples/dummy/awscdkcore\"\nimport \"github.com/aws-samples/dummy/awscdkassertions\"\n\nstack := awscdkcore.NewStack()\n// ...\ntemplate := awscdkassertions.Template_FromStack(stack)","version":"1"},"$":{"source":"import { Stack } from '@aws-cdk/core';\nimport { Template } from '@aws-cdk/assertions';\n\nconst stack = new Stack(/* ... */);\n// ...\nconst template = Template.fromStack(stack);","version":"0"}},"location":{"api":{"api":"type","fqn":"@aws-cdk/assertions.Template"},"field":{"field":"example"}},"didCompile":true,"fqnsReferenced":["@aws-cdk/assertions.Template","@aws-cdk/assertions.Template#fromStack","@aws-cdk/core.Stack"],"fullSource":"import { Stack } from '@aws-cdk/core';\nimport { Template } from '@aws-cdk/assertions';\n\nconst stack = new Stack(/* ... */);\n// ...\nconst template = Template.fromStack(stack);","syntaxKindCounter":{"10":2,"75":8,"194":1,"196":1,"197":1,"225":2,"242":2,"243":2,"254":2,"255":2,"257":2,"258":2,"290":1},"fqnsFingerprint":"ffff911b16d15e1e1073e3d3b7d871591d42e9c12faa1edf68364c36a84b6271"}}}